using DynamicData;
using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Mutagen.Bethesda.Plugins.Records;
using Noggog;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace GenderDialoguePatch
{
    public class TestSettings
    {
        [SettingName("Custom Pronouns")]
        public bool PatchCustomPronouns = false;

        [SettingName("Nominative")]
        public string CustomPronoun_Nominative = "they";

        [SettingName("Accusative")]
        public string CustomPronoun_Accusative = "them";

        [SettingName("Pronominal Possessive")]
        public string CustomPronoun_PronominalPossessive = "their";

        [SettingName("Predicative Possessive")]
        public string CustomPronoun_PredicativePossessive = "theirs";

        [SettingName("Reflexive")]
        public string CustomPronoun_Reflexive = "themself";
    }

    public class QuestInfo
    {
        public uint nextAliasID = 0;
        public List<QuestAlias> aliases = new();
        public bool overriden = false;
        public QuestAdapter scripts = new();
        public IFormLink<IQuestGetter> quest = new FormLink<IQuestGetter>();
    }

    public class Program
    {
        static Lazy<TestSettings> Settings = null!;

        public static string CapatalizeFirst(string text)
        {
            return string.Concat(text[0].ToString().ToUpper(), text.AsSpan(1));
        }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static readonly FormLink<Global> Male = FormKey.Factory("000F48:Gender-Neutral Dialogue.esp").ToLink<Global>();
        public static readonly FormLink<Global> Female = FormKey.Factory("000F49:Gender-Neutral Dialogue.esp").ToLink<Global>();
        public static readonly FormLink<Keyword> NpcNonBinary = FormKey.Factory("EBDA00:Update.esm").ToLink<Keyword>();
        public static readonly FormLink<GlobalShort> CustomPronouns = FormKey.Factory("000F4A:Gender-Neutral Dialogue.esp").ToLink<GlobalShort>();

        public static bool IsValidDialogue(IDialogResponsesGetter response)
        {
            var returnTrue = false;
            if (response.Conditions != null)
            {
                foreach (var condition in response.Conditions)
                {
                    if (condition.Data != null)
                    {
                        if (condition.Data is HasKeywordConditionData)
                        {
                            HasKeywordConditionData? conditionData = condition.Data as HasKeywordConditionData ?? throw new Exception();
                            if (conditionData.Keyword.Link.FormKey.GetHashCode() == NpcNonBinary.FormKey.GetHashCode()) return false;
                        }
                        else if (condition.Data is GetPCIsSexConditionData)
                        {
                            returnTrue = true;
                        }
                        else if (condition.Data is GetIsSexConditionData && condition.Data.RunOnType != Condition.RunOnType.Subject)
                        {
                            returnTrue = true;
                        }
                    }
                }
            }
            return returnTrue;
        }

        public static bool IsCustomDialogue(IDialogResponsesGetter response)
        {
            if (response.Conditions != null)
            {
                foreach (var condition in response.Conditions)
                {
                    if (condition.Data != null && condition.Data is GetGlobalValueConditionData)
                    {
                        GetGlobalValueConditionData? conditionData = condition.Data as GetGlobalValueConditionData ?? throw new Exception();
                        if (conditionData.Global.Link.FormKey == CustomPronouns.FormKey) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        public static string TryCreateAlias(string textToReplace, string aliasName, FormKey reference, QuestInfo aliasInfos, string text)
        {
            if (text.Contains(textToReplace) || text.Contains(textToReplace.Replace("=", "Cap=")))
            {
                aliasInfos.overriden = true;
                text = text.Replace(textToReplace, "<Alias.Race=" + aliasName + ">");
                text = text.Replace(textToReplace.Replace("=", "Cap="), "<Alias.RaceCap=" + aliasName + ">");
                if (!aliasInfos.aliases.Any(alias => alias.Name == aliasName))
                {
                    aliasInfos.aliases.Add(new QuestAlias()
                    {
                        Name = aliasName,
                        ForcedReference = reference.ToNullableLink<IPlacedGetter>(),
                        Flags = QuestAlias.Flag.StoresText,
                        ID = aliasInfos.nextAliasID
                    });
                    aliasInfos.scripts.Scripts.Add(new ScriptEntry()
                    {
                        Flags = ScriptEntry.Flag.Local,
                        Name = "GenderNeutralDialogueQuestAlias",
                        Properties = new() {
                            new ScriptObjectProperty() {
                                Name = "forceref",
                                Flags = ScriptProperty.Flag.Edited,
                                Object = reference.ToLink<IPlacedGetter>()
                            },
                            new ScriptIntProperty() {
                                Name = "index",
                                Flags = ScriptProperty.Flag.Edited,
                                Data = (short)aliasInfos.nextAliasID
                            },
                        }
                    });
                    aliasInfos.nextAliasID++;
                }
            }
            return text;
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Your code here!

            foreach (var item in state.LoadOrder.PriorityOrder.DialogResponses().WinningContextOverrides(state.LinkCache))
            {
                if (IsValidDialogue(item.Record))
                {
                    var responses = item.GetOrAddAsOverride(state.PatchMod);
                    string? responsetext = "";
                    if (responses.Responses.TryGet(0, out var output))
                    {
                        responsetext = output.Text;
                    }
                    Console.WriteLine(item.ModKey.FileName + " " + responses.FormKey + " " + responsetext);

                    responses.Flags ??= new();
                    responses.Flags.Flags |= DialogResponses.Flag.Random;

                    var index = 0;
                    foreach (var condition in responses.Conditions)
                    {
                        if (condition.Data == null) continue;
                        if (condition.Data is GetPCIsSexConditionData)
                        {
                            GetPCIsSexConditionData? conditionData = condition.Data as GetPCIsSexConditionData ?? throw new Exception();
                            if ((conditionData.MaleFemaleGender == MaleFemaleGender.Female && condition.CompareOperator == CompareOperator.EqualTo) || (conditionData.MaleFemaleGender == MaleFemaleGender.Male && condition.CompareOperator == CompareOperator.NotEqualTo))
                            {
                                responses.Conditions.Remove(condition);
                                responses.Conditions.Insert(index, new ConditionFloat()
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 1,
                                    Data = new GetGlobalValueConditionData()
                                    {
                                        RunOnType = Condition.RunOnType.Subject,
                                        Global = new FormLinkOrIndex<IGlobalGetter>(new GetGlobalValueConditionData(), Female.FormKey)
                                    }
                                });
                            }
                            else if (((conditionData.MaleFemaleGender == MaleFemaleGender.Male && condition.CompareOperator == CompareOperator.EqualTo) || (conditionData.MaleFemaleGender == MaleFemaleGender.Female && condition.CompareOperator == CompareOperator.NotEqualTo)))
                            {
                                responses.Conditions.Remove(condition);
                                responses.Conditions.Insert(index, new ConditionFloat()
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 1,
                                    Data = new GetGlobalValueConditionData()
                                    {
                                        RunOnType = Condition.RunOnType.Subject,
                                        Global = new FormLinkOrIndex<IGlobalGetter>(new GetGlobalValueConditionData(), Male.FormKey)
                                    }
                                });
                            }
                            break;
                        }
                        else if (condition.Data is GetIsSexConditionData && condition.Data.RunOnType != Condition.RunOnType.Subject)
                        {
                            GetIsSexConditionData? conditionData = condition.Data as GetIsSexConditionData ?? throw new Exception();
                            if (conditionData.Reference.FormKey == Constants.Player.FormKey)
                            {
                                if ((conditionData.MaleFemaleGender == MaleFemaleGender.Female && condition.CompareOperator == CompareOperator.EqualTo) || (conditionData.MaleFemaleGender == MaleFemaleGender.Male && condition.CompareOperator == CompareOperator.NotEqualTo))
                                {
                                    responses.Conditions.Remove(condition);
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new GetGlobalValueConditionData()
                                        {
                                            RunOnType = conditionData.RunOnType,
                                            Global = new FormLinkOrIndex<IGlobalGetter>(new GetGlobalValueConditionData(), Female.FormKey)
                                        }
                                    });
                                }
                                else if ((conditionData.MaleFemaleGender == MaleFemaleGender.Male && condition.CompareOperator == CompareOperator.EqualTo) || (conditionData.MaleFemaleGender == MaleFemaleGender.Female && condition.CompareOperator == CompareOperator.NotEqualTo))
                                {
                                    responses.Conditions.Remove(condition);
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new GetGlobalValueConditionData()
                                        {
                                            RunOnType = conditionData.RunOnType,
                                            Global = new FormLinkOrIndex<IGlobalGetter>(new GetGlobalValueConditionData(), Male.FormKey)
                                        }
                                    });
                                }
                            }
                            else
                            {
                                responses.Conditions.Insert(index + 1, new ConditionFloat()
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 0,
                                    Data = new HasKeywordConditionData()
                                    {
                                        RunOnType = conditionData.RunOnType,
                                        Keyword = new FormLinkOrIndex<IKeywordGetter>(new HasKeywordConditionData(), NpcNonBinary.FormKey)
                                    }
                                });
                                responses.Conditions.Insert(index, new ConditionFloat() // is player
                                {
                                    Flags = Condition.Flag.OR,
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 1,
                                    Data = new GetIsIDConditionData()
                                    {
                                        RunOnType = conditionData.RunOnType,
                                        Object = new FormLinkOrIndex<IReferenceableObjectGetter>(new GetIsIDConditionData(), Skyrim.Npc.Player.FormKey)
                                    }
                                });
                                responses.Conditions.Insert(index, new ConditionFloat() // not player
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 0,
                                    Data = new GetIsIDConditionData()
                                    {
                                        RunOnType = conditionData.RunOnType,
                                        Object = new FormLinkOrIndex<IReferenceableObjectGetter>(new GetIsIDConditionData(), Skyrim.Npc.Player.FormKey)
                                    }
                                });
                                if ((conditionData.MaleFemaleGender == MaleFemaleGender.Female && condition.CompareOperator == CompareOperator.EqualTo) || (conditionData.MaleFemaleGender == MaleFemaleGender.Male && condition.CompareOperator == CompareOperator.NotEqualTo))
                                {
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        Flags = Condition.Flag.OR,
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new GetGlobalValueConditionData()
                                        {
                                            RunOnType = Condition.RunOnType.Subject,
                                            Global = new FormLinkOrIndex<IGlobalGetter>(new GetGlobalValueConditionData(), Female.FormKey)
                                        }
                                    });
                                }
                                else
                                {
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        Flags = Condition.Flag.OR,
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new GetGlobalValueConditionData()
                                        {
                                            RunOnType = Condition.RunOnType.Subject,
                                            Global = new FormLinkOrIndex<IGlobalGetter>(new GetGlobalValueConditionData(), Male.FormKey)
                                        }
                                    });
                                }
                            }
                            break;
                        }
                        index++;
                    }
                }
                else if (Settings.Value.PatchCustomPronouns && IsCustomDialogue(item.Record))
                {
                    var responses = item.GetOrAddAsOverride(state.PatchMod);

                    foreach (var response in responses.Responses)
                    {
                        string? text = response.Text.String ?? throw new Exception("Null text for dialogue response");
                        text = text.Replace("&&p_Nominative&&", Settings.Value.CustomPronoun_Nominative);
                        text = text.Replace("&&P_Nominative&&", CapatalizeFirst(Settings.Value.CustomPronoun_Nominative));
                        text = text.Replace("&&p_Accusative&&", Settings.Value.CustomPronoun_Accusative);
                        text = text.Replace("&&P_Accusative&&", CapatalizeFirst(Settings.Value.CustomPronoun_Accusative));
                        text = text.Replace("&&p_Reflexive&&", Settings.Value.CustomPronoun_Reflexive);
                        text = text.Replace("&&P_Reflexive&&", CapatalizeFirst(Settings.Value.CustomPronoun_Reflexive));
                        text = text.Replace("&&p_Possessive&&", Settings.Value.CustomPronoun_PronominalPossessive);
                        text = text.Replace("&&P_Possessive&&", CapatalizeFirst(Settings.Value.CustomPronoun_PronominalPossessive));

                        response.Text = text;
                        Console.WriteLine(text);
                    }
                }
            }

            if (Settings.Value.PatchCustomPronouns)
            {
                var theyve = FormKey.Factory("000B73:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theyve.Name = Settings.Value.CustomPronoun_Nominative + " 's";
                state.PatchMod.Races.Set(theyve);
                var theyare = FormKey.Factory("000B6F:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theyare.Name = Settings.Value.CustomPronoun_Nominative + " is";
                state.PatchMod.Races.Set(theyare);
                var theycall = FormKey.Factory("000B70:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theycall.Name = Settings.Value.CustomPronoun_Nominative + " call";
                state.PatchMod.Races.Set(theycall);
                var theyreach = FormKey.Factory("000B72:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theyreach.Name = Settings.Value.CustomPronoun_Nominative + " reach";
                state.PatchMod.Races.Set(theyreach);
                var theywere = FormKey.Factory("000B74:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theywere.Name = Settings.Value.CustomPronoun_Nominative + " was";
                state.PatchMod.Races.Set(theywere);
                var theydo = FormKey.Factory("000B71:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theydo.Name = Settings.Value.CustomPronoun_Nominative + " do";
                state.PatchMod.Races.Set(theydo);
                var they = FormKey.Factory("000B6E:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                they.Name = Settings.Value.CustomPronoun_Nominative;
                state.PatchMod.Races.Set(they);
                var them = FormKey.Factory("000B74:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                them.Name = Settings.Value.CustomPronoun_Accusative;
                state.PatchMod.Races.Set(them);
                var their = FormKey.Factory("000B6A:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                their.Name = Settings.Value.CustomPronoun_PronominalPossessive;
                state.PatchMod.Races.Set(their);
                var theirs = FormKey.Factory("000B6B:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                theirs.Name = Settings.Value.CustomPronoun_PredicativePossessive;
                state.PatchMod.Races.Set(theirs);
                var themself = FormKey.Factory("000B6D:Gender-Neutral Dialogue.esp").ToLink<IRaceGetter>().Resolve(state.LinkCache).DeepCopy();
                themself.Name = Settings.Value.CustomPronoun_Reflexive;
                state.PatchMod.Races.Set(themself);
            }

            foreach (var questGetter in state.LoadOrder.PriorityOrder.Quest().WinningOverrides())
            {
                QuestInfo questInfo = new();
                if (questGetter.VirtualMachineAdapter != null) questInfo.scripts = questGetter.VirtualMachineAdapter.DeepCopy();
                questInfo.quest = questGetter.ToLink();
                foreach (var aliasGetter in questGetter.Aliases)
                {
                    if (aliasGetter.ID > questInfo.nextAliasID) questInfo.nextAliasID = aliasGetter.ID;
                }
                questInfo.nextAliasID++;
                foreach (var aliasGetter in questGetter.Aliases)
                {
                    if (aliasGetter.Flags == null || !aliasGetter.Flags.Value.HasFlag(QuestAlias.Flag.UsesStoredText)) continue;
                    if (aliasGetter.CreateReferenceToObject == null) continue;
                    Book? book = null;
                    if (aliasGetter.CreateReferenceToObject.Object.TryResolve<IBookGetter>(state.LinkCache, out var bookGetter))
                    {
                        if (bookGetter.Teaches is BookSpell) continue;
                        book = bookGetter.DeepCopy();
                    }
                    if (book == null) continue;
                    string text = book.BookText.ToString();
                    if (text == null) continue;

                    text = TryCreateAlias("<Alias.Pronoun=Player>'s", "they've", FormKey.Factory("0008F0:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.Pronoun=Player> is", "they are", FormKey.Factory("0008F2:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.Pronoun=Player> reaches", "they reach", FormKey.Factory("0008F4:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.Pronoun=Player> does", "they do", FormKey.Factory("0008F6:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.Pronoun=Player> calls", "they call", FormKey.Factory("0008F8:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.Pronoun=Player> was", "they were", FormKey.Factory("0008FA:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.Pronoun=Player>", "they", FormKey.Factory("000F24:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.PronounPosObj=Player>", "their", FormKey.Factory("000F26:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.PronounPos=Player>", "theirs", FormKey.Factory("000F28:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.PronounObj=Player>", "them", FormKey.Factory("000F30:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.PronounInt=Player>", "themself", FormKey.Factory("000FC4:Gender-Neutral Dialogue.esp"), questInfo, text);
                    text = TryCreateAlias("<Alias.PronounRef=Player>", "themself", FormKey.Factory("000FC4:Gender-Neutral Dialogue.esp"), questInfo, text);

                    if (questInfo.overriden)
                    {
                        book.BookText = text;
                        state.PatchMod.Books.Set(book);
                        Console.WriteLine(Environment.NewLine + /*book.ModKey.FileName + " " + */book.FormKey + " " + book.EditorID + Environment.NewLine + text);
                    }
                }
                if (questInfo.overriden)
                {
                    var quest = questGetter.DeepCopy();
                    quest.Aliases.Add(questInfo.aliases);
                    quest.VirtualMachineAdapter = questInfo.scripts;
                    state.PatchMod.Quests.Set(quest);
                }
            }
        }
    }
}
