using Mutagen.Bethesda;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Plugins;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.WPF.Reflection.Attributes;
using Noggog;
using System;
using System.Threading.Tasks;

namespace GenderDialoguePatch
{
    public class TestSettings
    {
        [SettingName("Patch Book Text")]
        [Tooltip("Patches book text to refer to the player using they/them, or custom pronouns if they are enabled")]
        public bool PatchBookText = true;

        [SettingName("Custom Pronouns")]
        public bool PatchCustomPronouns = false;

        [SettingName("Nominative")]
        public string CustomPronoun_Nominative = "they";

        [SettingName("Accusative")]
        public string CustomPronoun_Accusative = "them";

        [SettingName("Pronominal Possessive")]
        public string CustomPronoun_PronominalPossessive = "their";

        [SettingName("Predicative Possessive")]
        public string CustomPronoun_PredicativePossessive = "theirs";

        [SettingName("Reflexive")]
        public string CustomPronoun_Reflexive = "themself";
    }

    public class Program
    {
        static Lazy<TestSettings> Settings = null!;

        public static string CapatalizeFirst(string text)
        {
            return string.Concat(text[0].ToString().ToUpper(), text.AsSpan(1));
        }

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "YourPatcher.esp")
                .Run(args);
        }

        public static readonly FormLink<Global> Female = FormKey.Factory("000F48:Gender-Neutral Dialogue.esp").ToLink<Global>();
        public static readonly FormLink<Global> Male = FormKey.Factory("000F49:Gender-Neutral Dialogue.esp").ToLink<Global>();
        public static readonly FormLink<Keyword> NpcNonBinary = FormKey.Factory("EBDA00:Update.esm").ToLink<Keyword>();
        public static readonly FormLink<GlobalShort> CustomPronouns = FormKey.Factory("000F4A:Gender-Neutral Dialogue.esp").ToLink<GlobalShort>();

        public static bool IsValidDialogue(IDialogResponsesGetter response)
        {
            var returnTrue = false;
            if (response.Conditions != null)
            {
                foreach (var condition in response.Conditions)
                {
                    if (condition.Data != null)
                    {
                        var conditionFunction = (FunctionConditionData)condition.Data.DeepCopy();
                        if (conditionFunction.Function == Condition.Function.HasKeyword)
                        {
                            if (conditionFunction.ParameterOneRecord.FormKey.GetHashCode() == NpcNonBinary.FormKey.GetHashCode()) return false;
                        }
                        else if (conditionFunction.Function == Condition.Function.GetPCIsSex)
                        {
                            returnTrue = true;
                        }
                        else if (conditionFunction.Function == Condition.Function.GetIsSex && conditionFunction.RunOnType != Condition.RunOnType.Subject)
                        {
                            returnTrue = true;
                        }
                    }
                }
            }
            return returnTrue;
        }

        public static bool IsCustomDialogue(IDialogResponsesGetter response)
        {
            if (response.Conditions != null)
            {
                foreach (var condition in response.Conditions)
                {
                    if (condition.Data != null)
                    {
                        var conditionFunction = (FunctionConditionData)condition.Data.DeepCopy();
                        if (conditionFunction.Function == Condition.Function.GetGlobalValue)
                        {
                            if (conditionFunction.ParameterOneRecord.FormKey == CustomPronouns.FormKey)
                            {
                                return true;
                            }
                        }
                    }
                }
            }
            return false;
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            //Your code here!

            foreach (var item in state.LoadOrder.PriorityOrder.DialogResponses().WinningContextOverrides(state.LinkCache))
            {
                if (IsValidDialogue(item.Record))
                {
                    var responses = item.GetOrAddAsOverride(state.PatchMod);
                    string? responsetext = "";
                    if (responses.Responses.TryGet(0, out var output))
                    {
                        responsetext = output.Text;
                    }
                    Console.WriteLine(item.ModKey.FileName + " " + responses.FormKey + " " + responsetext);

                    responses.Flags ??= new();
                    responses.Flags.Flags |= DialogResponses.Flag.Random;

                    var index = 0;
                    foreach (var condition in responses.Conditions)
                    {
                        if (condition.Data == null) continue;
                        var conditionFunction = (FunctionConditionData)condition.Data;
                        if (conditionFunction.Function == Condition.Function.GetPCIsSex)
                        {
                            if ((conditionFunction.ParameterOneNumber == 0 && condition.CompareOperator == CompareOperator.EqualTo) || (conditionFunction.ParameterOneNumber == 1 && condition.CompareOperator == CompareOperator.NotEqualTo))
                            {
                                responses.Conditions.Remove(condition);
                                responses.Conditions.Insert(index, new ConditionFloat()
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 1,
                                    Data = new FunctionConditionData()
                                    {
                                        Function = Condition.Function.GetGlobalValue,
                                        ParameterOneRecord = Female
                                    }
                                });
                            }
                            else if ((conditionFunction.ParameterOneNumber == 1 && condition.CompareOperator == CompareOperator.EqualTo) || (conditionFunction.ParameterOneNumber == 0 && condition.CompareOperator == CompareOperator.NotEqualTo))
                            {
                                responses.Conditions.Remove(condition);
                                responses.Conditions.Insert(index, new ConditionFloat()
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 1,
                                    Data = new FunctionConditionData()
                                    {
                                        Function = Condition.Function.GetGlobalValue,
                                        ParameterOneRecord = Male
                                    }
                                });
                            }
                            break;
                        }
                        else if (conditionFunction.Function == Condition.Function.GetIsSex && conditionFunction.RunOnType != Condition.RunOnType.Subject)
                        {
                            if (conditionFunction.Reference.FormKey == Constants.Player.FormKey)
                            {
                                if ((conditionFunction.ParameterOneNumber == 0 && condition.CompareOperator == CompareOperator.EqualTo) || (conditionFunction.ParameterOneNumber == 1 && condition.CompareOperator == CompareOperator.NotEqualTo))
                                {
                                    responses.Conditions.Remove(condition);
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new FunctionConditionData()
                                        {
                                            Function = Condition.Function.GetGlobalValue,
                                            ParameterOneRecord = Female
                                        }
                                    });
                                }
                                else if ((conditionFunction.ParameterOneNumber == 1 && condition.CompareOperator == CompareOperator.EqualTo) || (conditionFunction.ParameterOneNumber == 0 && condition.CompareOperator == CompareOperator.NotEqualTo))
                                {
                                    responses.Conditions.Remove(condition);
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new FunctionConditionData()
                                        {
                                            Function = Condition.Function.GetGlobalValue,
                                            ParameterOneRecord = Male
                                        }
                                    });
                                }
                            }
                            else
                            {
                                responses.Conditions.Insert(index + 1, new ConditionFloat()
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 0,
                                    Data = new FunctionConditionData()
                                    {
                                        Function = Condition.Function.HasKeyword,
                                        RunOnType = conditionFunction.RunOnType,
                                        ParameterOneRecord = NpcNonBinary,
                                    }
                                });
                                responses.Conditions.Insert(index, new ConditionFloat() // is player
                                {
                                    Flags = Condition.Flag.OR,
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 1,
                                    Data = new FunctionConditionData()
                                    {
                                        Function = Condition.Function.GetIsID,
                                        RunOnType = conditionFunction.RunOnType,
                                        ParameterOneRecord = Skyrim.Npc.Player,
                                    }
                                });
                                responses.Conditions.Insert(index, new ConditionFloat() // not player
                                {
                                    CompareOperator = CompareOperator.EqualTo,
                                    ComparisonValue = 0,
                                    Data = new FunctionConditionData()
                                    {
                                        Function = Condition.Function.GetIsID,
                                        RunOnType = conditionFunction.RunOnType,
                                        ParameterOneRecord = Skyrim.Npc.Player
                                    }
                                });
                                if ((conditionFunction.ParameterOneNumber == 0 && condition.CompareOperator == CompareOperator.EqualTo) || (conditionFunction.ParameterOneNumber == 1 && condition.CompareOperator == CompareOperator.NotEqualTo))
                                {
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        Flags = Condition.Flag.OR,
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new FunctionConditionData()
                                        {
                                            Function = Condition.Function.GetGlobalValue,
                                            ParameterOneRecord = Female
                                        }
                                    });
                                }
                                else
                                {
                                    responses.Conditions.Insert(index, new ConditionFloat()
                                    {
                                        Flags = Condition.Flag.OR,
                                        CompareOperator = CompareOperator.EqualTo,
                                        ComparisonValue = 1,
                                        Data = new FunctionConditionData()
                                        {
                                            Function = Condition.Function.GetGlobalValue,
                                            ParameterOneRecord = Male
                                        }
                                    });
                                }
                            }
                            break;
                        }
                        index++;
                    }
                }
                else if (Settings.Value.PatchCustomPronouns && IsCustomDialogue(item.Record))
                {
                    var responses = item.GetOrAddAsOverride(state.PatchMod);

                    foreach (var response in responses.Responses)
                    {
                        string? text = response.Text.String ?? throw new Exception("Null text for dialogue response");
                        text = text.Replace("&&p_Nominative&&", Settings.Value.CustomPronoun_Nominative);
                        text = text.Replace("&&P_Nominative&&", CapatalizeFirst(Settings.Value.CustomPronoun_Nominative));
                        text = text.Replace("&&p_Accusative&&", Settings.Value.CustomPronoun_Accusative);
                        text = text.Replace("&&P_Accusative&&", CapatalizeFirst(Settings.Value.CustomPronoun_Accusative));
                        text = text.Replace("&&p_Reflexive&&", Settings.Value.CustomPronoun_Reflexive);
                        text = text.Replace("&&P_Reflexive&&", CapatalizeFirst(Settings.Value.CustomPronoun_Reflexive));
                        text = text.Replace("&&p_Possessive&&", Settings.Value.CustomPronoun_PronominalPossessive);
                        text = text.Replace("&&P_Possessive&&", CapatalizeFirst(Settings.Value.CustomPronoun_PronominalPossessive));

                        response.Text = text;
                        Console.WriteLine(text);
                    }
                }
            }

            if (Settings.Value.PatchBookText)
            {
                foreach (var item in state.LoadOrder.PriorityOrder.Book().WinningContextOverrides())
                {
                    var text = item.Record.BookText.ToString();
                    if (text == null) continue;
                    if (text.Contains("<Alias.Pronoun=Player>") || text.Contains("<Alias.PronounObj=Player>") || text.Contains("<Alias.PronounPos=Player>") || text.Contains("<Alias.PronounPosObj=Player>") || text.Contains("<Alias.PronounRef=Player>") || text.Contains("<Alias.PronounInt=Player>") || text.Contains("<Alias.PronounCap=Player>") || text.Contains("<Alias.PronounObjCap=Player>") || text.Contains("<Alias.PronounPosCap=Player>") || text.Contains("<Alias.PronounPosObjCap=Player>") || text.Contains("<Alias.PronounRefCap=Player>") || text.Contains("<Alias.PronounIntCap=Player>"))
                    {
                        var book = item.GetOrAddAsOverride(state.PatchMod);

                        if (Settings.Value.PatchCustomPronouns)
                        {
                            text = text.Replace("<Alias.Pronoun=Player>", Settings.Value.CustomPronoun_Nominative);
                            text = text.Replace("<Alias.PronounCap=Player>", CapatalizeFirst(Settings.Value.CustomPronoun_Nominative));
                            text = text.Replace("<Alias.PronounObj=Player>", Settings.Value.CustomPronoun_Accusative);
                            text = text.Replace("<Alias.PronounObjCap=Player>", CapatalizeFirst(Settings.Value.CustomPronoun_Accusative));
                            text = text.Replace("<Alias.PronounPosObj=Player>", Settings.Value.CustomPronoun_PronominalPossessive);
                            text = text.Replace("<Alias.PronounPosObjCap=Player>", CapatalizeFirst(Settings.Value.CustomPronoun_PronominalPossessive));
                            text = text.Replace("<Alias.PronounPos=Player>", Settings.Value.CustomPronoun_PredicativePossessive);
                            text = text.Replace("<Alias.PronounPosCap=Player>", CapatalizeFirst(Settings.Value.CustomPronoun_PredicativePossessive));
                            text = text.Replace("<Alias.PronounRef=Player>", Settings.Value.CustomPronoun_Reflexive);
                            text = text.Replace("<Alias.PronounRefCap=Player>", CapatalizeFirst(Settings.Value.CustomPronoun_Reflexive));
                            text = text.Replace("<Alias.PronounInt=Player>", Settings.Value.CustomPronoun_Reflexive);
                            text = text.Replace("<Alias.PronounIntCap=Player>", CapatalizeFirst(Settings.Value.CustomPronoun_Reflexive));
                        }
                        else
                        {
                            text = text.Replace("<Alias.Pronoun=Player> is", "they are");
                            text = text.Replace("<Alias.PronounCap=Player> is", "They are");
                            text = text.Replace("<Alias.Pronoun=Player> was", "they were");
                            text = text.Replace("<Alias.PronounCap=Player> was", "They were");
                            text = text.Replace("<Alias.Pronoun=Player> reaches", "they reach");
                            text = text.Replace("<Alias.PronounCap=Player> reaches", "They reach");
                            text = text.Replace("<Alias.Pronoun=Player> calls", "they call");
                            text = text.Replace("<Alias.PronounCap=Player> calls", "They call");
                            text = text.Replace("<Alias.Pronoun=Player> does", "they do");
                            text = text.Replace("<Alias.PronounCap=Player> does", "They do");
                            text = text.Replace("<Alias.Pronoun=Player>'s", "they've");
                            text = text.Replace("<Alias.PronounCap=Player>'s", "They've");
                            text = text.Replace("<Alias.Pronoun=Player>", "they");
                            text = text.Replace("<Alias.PronounCap=Player>", "They");
                            text = text.Replace("<Alias.PronounObj=Player>", "them");
                            text = text.Replace("<Alias.PronounObjCap=Player>", "Them");
                            text = text.Replace("<Alias.PronounPosObj=Player>", "their");
                            text = text.Replace("<Alias.PronounPosObjCap=Player>", "Their");
                            text = text.Replace("<Alias.PronounPos=Player>", "theirs");
                            text = text.Replace("<Alias.PronounPosCap=Player>", "Theirs");
                            text = text.Replace("<Alias.PronounRef=Player>", "themself");
                            text = text.Replace("<Alias.PronounRefCap=Player>", "Themself");
                            text = text.Replace("<Alias.PronounInt=Player>", "themself");
                            text = text.Replace("<Alias.PronounIntCap=Player>", "Themself");
                        }

                        book.BookText = text;
                        Console.WriteLine(item.ModKey.FileName + " " + book.FormKey + " " + book.EditorID + System.Environment.NewLine + text);
                    }
                }
            }
        }
    }
}
